// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/massalabs/deweb-server/api/read/models"
)

// GetResourceOKCode is the HTTP code returned for type GetResourceOK
const GetResourceOKCode int = 200

/*
GetResourceOK Successful response

swagger:response getResourceOK
*/
type GetResourceOK struct {
}

// NewGetResourceOK creates GetResourceOK with default headers values
func NewGetResourceOK() *GetResourceOK {

	return &GetResourceOK{}
}

// WriteResponse to the client
func (o *GetResourceOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(200)
}

// GetResourceNotFoundCode is the HTTP code returned for type GetResourceNotFound
const GetResourceNotFoundCode int = 404

/*
GetResourceNotFound Resource not found

swagger:response getResourceNotFound
*/
type GetResourceNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetResourceNotFound creates GetResourceNotFound with default headers values
func NewGetResourceNotFound() *GetResourceNotFound {

	return &GetResourceNotFound{}
}

// WithPayload adds the payload to the get resource not found response
func (o *GetResourceNotFound) WithPayload(payload *models.Error) *GetResourceNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get resource not found response
func (o *GetResourceNotFound) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetResourceNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
