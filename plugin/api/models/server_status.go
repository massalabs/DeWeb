// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ServerStatus server status
//
// swagger:model ServerStatus
type ServerStatus struct {

	// Error message if server failed to start or is in error state
	ErrorMessage string `json:"errorMessage,omitempty"`

	// network
	Network *ServerStatusNetwork `json:"network,omitempty"`

	// The port the server is running on
	ServerPort int32 `json:"serverPort,omitempty"`

	// status
	// Enum: ["running","stopped","starting","stopping","error"]
	Status string `json:"status,omitempty"`
}

// Validate validates this server status
func (m *ServerStatus) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateNetwork(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ServerStatus) validateNetwork(formats strfmt.Registry) error {
	if swag.IsZero(m.Network) { // not required
		return nil
	}

	if m.Network != nil {
		if err := m.Network.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("network")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("network")
			}
			return err
		}
	}

	return nil
}

var serverStatusTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["running","stopped","starting","stopping","error"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		serverStatusTypeStatusPropEnum = append(serverStatusTypeStatusPropEnum, v)
	}
}

const (

	// ServerStatusStatusRunning captures enum value "running"
	ServerStatusStatusRunning string = "running"

	// ServerStatusStatusStopped captures enum value "stopped"
	ServerStatusStatusStopped string = "stopped"

	// ServerStatusStatusStarting captures enum value "starting"
	ServerStatusStatusStarting string = "starting"

	// ServerStatusStatusStopping captures enum value "stopping"
	ServerStatusStatusStopping string = "stopping"

	// ServerStatusStatusError captures enum value "error"
	ServerStatusStatusError string = "error"
)

// prop value enum
func (m *ServerStatus) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, serverStatusTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ServerStatus) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this server status based on the context it is used
func (m *ServerStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateNetwork(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ServerStatus) contextValidateNetwork(ctx context.Context, formats strfmt.Registry) error {

	if m.Network != nil {

		if swag.IsZero(m.Network) { // not required
			return nil
		}

		if err := m.Network.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("network")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("network")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ServerStatus) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ServerStatus) UnmarshalBinary(b []byte) error {
	var res ServerStatus
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ServerStatusNetwork server status network
//
// swagger:model ServerStatusNetwork
type ServerStatusNetwork struct {

	// chain ID
	ChainID uint64 `json:"chainID,omitempty"`

	// network
	Network string `json:"network,omitempty"`

	// version
	Version string `json:"version,omitempty"`
}

// Validate validates this server status network
func (m *ServerStatusNetwork) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this server status network based on context it is used
func (m *ServerStatusNetwork) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ServerStatusNetwork) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ServerStatusNetwork) UnmarshalBinary(b []byte) error {
	var res ServerStatusNetwork
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
