// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/massalabs/deweb-plugin/api/models"
)

// UpdateSettingsOKCode is the HTTP code returned for type UpdateSettingsOK
const UpdateSettingsOKCode int = 200

/*
UpdateSettingsOK Settings updated successfully

swagger:response updateSettingsOK
*/
type UpdateSettingsOK struct {
}

// NewUpdateSettingsOK creates UpdateSettingsOK with default headers values
func NewUpdateSettingsOK() *UpdateSettingsOK {

	return &UpdateSettingsOK{}
}

// WriteResponse to the client
func (o *UpdateSettingsOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(200)
}

// UpdateSettingsBadRequestCode is the HTTP code returned for type UpdateSettingsBadRequest
const UpdateSettingsBadRequestCode int = 400

/*
UpdateSettingsBadRequest Error updating settings

swagger:response updateSettingsBadRequest
*/
type UpdateSettingsBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewUpdateSettingsBadRequest creates UpdateSettingsBadRequest with default headers values
func NewUpdateSettingsBadRequest() *UpdateSettingsBadRequest {

	return &UpdateSettingsBadRequest{}
}

// WithPayload adds the payload to the update settings bad request response
func (o *UpdateSettingsBadRequest) WithPayload(payload *models.Error) *UpdateSettingsBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update settings bad request response
func (o *UpdateSettingsBadRequest) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateSettingsBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
