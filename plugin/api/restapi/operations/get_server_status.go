// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetServerStatusHandlerFunc turns a function with the right signature into a get server status handler
type GetServerStatusHandlerFunc func(GetServerStatusParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetServerStatusHandlerFunc) Handle(params GetServerStatusParams) middleware.Responder {
	return fn(params)
}

// GetServerStatusHandler interface for that can handle valid get server status params
type GetServerStatusHandler interface {
	Handle(GetServerStatusParams) middleware.Responder
}

// NewGetServerStatus creates a new http.Handler for the get server status operation
func NewGetServerStatus(ctx *middleware.Context, handler GetServerStatusHandler) *GetServerStatus {
	return &GetServerStatus{Context: ctx, Handler: handler}
}

/*
	GetServerStatus swagger:route GET /api/server/status getServerStatus

Get the current server status
*/
type GetServerStatus struct {
	Context *middleware.Context
	Handler GetServerStatusHandler
}

func (o *GetServerStatus) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetServerStatusParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
