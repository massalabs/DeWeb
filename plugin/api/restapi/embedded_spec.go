// Code generated by go-swagger; DO NOT EDIT.

package restapi

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
)

var (
	// SwaggerJSON embedded version of the swagger document used at generation time
	SwaggerJSON json.RawMessage
	// FlatSwaggerJSON embedded flattened version of the swagger document used at generation time
	FlatSwaggerJSON json.RawMessage
)

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "API for the DeWeb Plugin in MassaStation",
    "title": "DeWeb Plugin API",
    "version": "0.0.1"
  },
  "paths": {
    "/": {
      "get": {
        "description": "Handle the default page of the plugin",
        "operationId": "DefaultPage",
        "responses": {
          "302": {
            "description": "Redirect to /web"
          }
        }
      }
    },
    "/api/server/status": {
      "get": {
        "description": "Get the current server status",
        "produces": [
          "application/json"
        ],
        "operationId": "GetServerStatus",
        "responses": {
          "200": {
            "description": "Current server status",
            "schema": {
              "$ref": "#/definitions/ServerStatus"
            }
          }
        }
      }
    },
    "/api/settings": {
      "get": {
        "description": "Get the current plugin settings",
        "produces": [
          "application/json"
        ],
        "operationId": "GetSettings",
        "responses": {
          "200": {
            "description": "Current settings",
            "schema": {
              "$ref": "#/definitions/Settings"
            }
          }
        }
      },
      "put": {
        "description": "Update plugin settings",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "operationId": "UpdateSettings",
        "parameters": [
          {
            "description": "New settings",
            "name": "settings",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Settings"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Settings updated successfully"
          },
          "400": {
            "description": "Error updating settings",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/web/{resource}": {
      "get": {
        "description": "Plugin Frontend router.",
        "produces": [
          "application/json",
          "text/javascript",
          "text/html",
          "text/css",
          "text/webp",
          "image/png"
        ],
        "operationId": "PluginWebApp",
        "parameters": [
          {
            "type": "string",
            "description": "Website resource.",
            "name": "resource",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Page found"
          },
          "404": {
            "description": "Resource not found.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "CacheSettings": {
      "type": "object",
      "required": [
        "enabled"
      ],
      "properties": {
        "diskCacheDir": {
          "description": "Directory to store the disk cache",
          "type": "string"
        },
        "enabled": {
          "description": "Whether caching is enabled",
          "type": "boolean"
        },
        "fileListCacheDurationSeconds": {
          "description": "Duration in seconds for file list cache",
          "type": "integer",
          "format": "int32"
        },
        "siteDiskCacheMaxItems": {
          "description": "Maximum number of files stored in disk cache",
          "type": "integer",
          "format": "int32"
        },
        "siteRamCacheMaxItems": {
          "description": "Maximum number of files stored in RAM cache",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "Error": {
      "type": "object",
      "required": [
        "code",
        "message"
      ],
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "ServerStatus": {
      "type": "object",
      "properties": {
        "errorMessage": {
          "description": "Error message if server failed to start or is in error state",
          "type": "string"
        },
        "network": {
          "type": "object",
          "properties": {
            "chainID": {
              "type": "integer",
              "format": "uint64"
            },
            "network": {
              "type": "string"
            },
            "version": {
              "type": "string"
            }
          }
        },
        "serverPort": {
          "description": "The port the server is running on",
          "type": "integer",
          "format": "int32"
        },
        "status": {
          "type": "string",
          "enum": [
            "running",
            "stopped",
            "starting",
            "stopping",
            "error"
          ]
        }
      }
    },
    "Settings": {
      "type": "object",
      "required": [
        "networkUrl"
      ],
      "properties": {
        "cache": {
          "$ref": "#/definitions/CacheSettings"
        },
        "networkUrl": {
          "description": "The network node URL to connect to",
          "type": "string"
        },
        "serverPort": {
          "description": "The port the server is running on",
          "type": "integer",
          "format": "int32"
        }
      }
    }
  }
}`))
	FlatSwaggerJSON = json.RawMessage([]byte(`{
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "API for the DeWeb Plugin in MassaStation",
    "title": "DeWeb Plugin API",
    "version": "0.0.1"
  },
  "paths": {
    "/": {
      "get": {
        "description": "Handle the default page of the plugin",
        "operationId": "DefaultPage",
        "responses": {
          "302": {
            "description": "Redirect to /web"
          }
        }
      }
    },
    "/api/server/status": {
      "get": {
        "description": "Get the current server status",
        "produces": [
          "application/json"
        ],
        "operationId": "GetServerStatus",
        "responses": {
          "200": {
            "description": "Current server status",
            "schema": {
              "$ref": "#/definitions/ServerStatus"
            }
          }
        }
      }
    },
    "/api/settings": {
      "get": {
        "description": "Get the current plugin settings",
        "produces": [
          "application/json"
        ],
        "operationId": "GetSettings",
        "responses": {
          "200": {
            "description": "Current settings",
            "schema": {
              "$ref": "#/definitions/Settings"
            }
          }
        }
      },
      "put": {
        "description": "Update plugin settings",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "operationId": "UpdateSettings",
        "parameters": [
          {
            "description": "New settings",
            "name": "settings",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Settings"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Settings updated successfully"
          },
          "400": {
            "description": "Error updating settings",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/web/{resource}": {
      "get": {
        "description": "Plugin Frontend router.",
        "produces": [
          "application/json",
          "text/javascript",
          "text/html",
          "text/css",
          "text/webp",
          "image/png"
        ],
        "operationId": "PluginWebApp",
        "parameters": [
          {
            "type": "string",
            "description": "Website resource.",
            "name": "resource",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Page found"
          },
          "404": {
            "description": "Resource not found.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "CacheSettings": {
      "type": "object",
      "required": [
        "enabled"
      ],
      "properties": {
        "diskCacheDir": {
          "description": "Directory to store the disk cache",
          "type": "string"
        },
        "enabled": {
          "description": "Whether caching is enabled",
          "type": "boolean"
        },
        "fileListCacheDurationSeconds": {
          "description": "Duration in seconds for file list cache",
          "type": "integer",
          "format": "int32"
        },
        "siteDiskCacheMaxItems": {
          "description": "Maximum number of files stored in disk cache",
          "type": "integer",
          "format": "int32"
        },
        "siteRamCacheMaxItems": {
          "description": "Maximum number of files stored in RAM cache",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "Error": {
      "type": "object",
      "required": [
        "code",
        "message"
      ],
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "ServerStatus": {
      "type": "object",
      "properties": {
        "errorMessage": {
          "description": "Error message if server failed to start or is in error state",
          "type": "string"
        },
        "network": {
          "type": "object",
          "properties": {
            "chainID": {
              "type": "integer",
              "format": "uint64"
            },
            "network": {
              "type": "string"
            },
            "version": {
              "type": "string"
            }
          }
        },
        "serverPort": {
          "description": "The port the server is running on",
          "type": "integer",
          "format": "int32"
        },
        "status": {
          "type": "string",
          "enum": [
            "running",
            "stopped",
            "starting",
            "stopping",
            "error"
          ]
        }
      }
    },
    "ServerStatusNetwork": {
      "type": "object",
      "properties": {
        "chainID": {
          "type": "integer",
          "format": "uint64"
        },
        "network": {
          "type": "string"
        },
        "version": {
          "type": "string"
        }
      }
    },
    "Settings": {
      "type": "object",
      "required": [
        "networkUrl"
      ],
      "properties": {
        "cache": {
          "$ref": "#/definitions/CacheSettings"
        },
        "networkUrl": {
          "description": "The network node URL to connect to",
          "type": "string"
        },
        "serverPort": {
          "description": "The port the server is running on",
          "type": "integer",
          "format": "int32"
        }
      }
    }
  }
}`))
}
