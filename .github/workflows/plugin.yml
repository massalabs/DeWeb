name: Plugin

on:
  workflow_dispatch:
  workflow_call:
    inputs:
      version:
        type: string
        description: "Version for the build, without v prefix"
        required: false

env:
  VERSION: ${{ inputs.version }}

jobs:
  lint:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./plugin
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Installing dependencies
        uses: ./.github/actions/install
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Task generate
        run: task generate

      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v6
        with:
          version: v1.64
          args: --timeout=3m
          working-directory: ./plugin

      - name: Install gofumpt
        run: go install mvdan.cc/gofumpt@v0.7.0

      - name: Run gofumpt
        run: |
          ERRORS=$(gofumpt -l . | wc -l)
          if [[ "$ERRORS" != "0" ]]; then
            echo "following files are not gofumpted:"
            gofumpt -l .
            exit 1
          fi

  build:
    name: Build plugin
    strategy:
      matrix:
        include:
          - os: windows-2022
            arch: amd64
            target: windows
            ext: .exe
          - os: ubuntu-22.04
            arch: amd64
            target: linux
          - os: ubuntu-22.04
            arch: arm64
            target: linux
          - os: macos-13
            arch: amd64
            target: darwin
          - os: macos-14
            arch: arm64
            target: darwin

    runs-on: ${{ matrix.os }}
    defaults:
      run:
        working-directory: ./plugin
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Installing dependencies
        uses: ./.github/actions/install
        with:
          os: ${{ matrix.os }}
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install Plugin Go Dependencies
        run: task install
        shell: bash

      - name: Go Generate Plugin
        run: task generate
        shell: bash

      - name: Check if VERSION exists
        shell: bash
        id: check_version
        run: |
          if [ ! -z "${{ env.VERSION }}" ]; then
            echo "PRODUCTION=true" >> $GITHUB_ENV
          fi

      - name: Download server artifacts
        uses: actions/download-artifact@v4
        with:
          name: deweb-server_${{ matrix.target }}_${{ matrix.arch }}
          path: server/build

      - name: Rename server binary
        shell: bash
        run: |
          mkdir -p build
          mv ../server/build/deweb-server_${{ matrix.target }}_${{ matrix.arch }}${{ matrix.ext }} build/deweb-server${{ matrix.ext }}
          chmod +x build/deweb-server${{ matrix.ext }}

      - name: Build Plugin
        shell: bash
        run: task build
        env:
          OS: ${{ matrix.target }}
          ARCH: ${{ matrix.arch }}

      - name: Rename Plugin artifact
        run: mv build/deweb-plugin${{ matrix.ext }} deweb-plugin_${{ matrix.target }}_${{ matrix.arch }}${{ matrix.ext }}

      - name: Create platform directory with all required files
        shell: bash
        run: |
          mkdir -p platform_${{ matrix.target }}_${{ matrix.arch }}
          cp deweb-plugin_${{ matrix.target }}_${{ matrix.arch }}${{ matrix.ext }} platform_${{ matrix.target }}_${{ matrix.arch }}/
          cp build/deweb-server${{ matrix.ext }} platform_${{ matrix.target }}_${{ matrix.arch }}/
          cp favicon.png platform_${{ matrix.target }}_${{ matrix.arch }}/
          cp manifest.json platform_${{ matrix.target }}_${{ matrix.arch }}/

      - name: Create zip package
        shell: bash
        run: |
          cd platform_${{ matrix.target }}_${{ matrix.arch }}
          zip -r ../deweb-plugin_${{ matrix.target }}_${{ matrix.arch }}.zip *
          cd ..
          ls -la deweb-plugin_${{ matrix.target }}_${{ matrix.arch }}.zip

      - name: Upload Plugin zip package
        uses: actions/upload-artifact@v4
        with:
          name: deweb-plugin_${{ matrix.target }}_${{ matrix.arch }}_zip
          path: plugin/deweb-plugin_${{ matrix.target }}_${{ matrix.arch }}.zip
